# SPDX-FileCopyrightText: 2025 NORCE Research AS
# SPDX-License-Identifier: GPL-3.0
# pylint: disable=R0912

"""
Utiliy functions to write files and variables
"""

import os
import subprocess
from mako.template import Template


def create_corner_point_grid(dic, xcoord, zcoord):
    """
    Write the corner-point grid

    Args:
        dic (dict): Global dictionary

    Returns:
        None

    """
    grid, tmp = [], []
    grid.append("-- This deck was generated by pofff https://github.com/OPM/pofff\n")
    grid.append("-- Copyright (C) 2025 NORCE Research AS\n")
    grid.append("COORD\n")
    for j in range(dic["noCells"][1] + 1):
        for i in range(dic["noCells"][0] + 1):
            tmp.append(
                f"{xcoord[i * (dic['noCells'][2] + 1)]:E} {dic['ymy'][j]} 0 "
                f"{xcoord[i * (dic['noCells'][2] + 1) + dic['noCells'][2]]:E} {dic['ymy'][j]:E} 0 "
            )
    grid += compact_format("".join(tmp).split())
    grid.append("/\n")
    grid.append("ZCORN\n")
    tmp = []
    for i in range(dic["noCells"][0]):
        tmp.append(
            f"{zcoord[i*(dic['noCells'][2]+1)]:E} {zcoord[(i+1)*(dic['noCells'][2]+1)]:E} "
        )
    tmp.extend(tmp[-dic["noCells"][0] :])
    for k in range(dic["noCells"][2] - 1):
        for i in range(dic["noCells"][0]):
            tmp.append(
                f"{zcoord[(i * (dic['noCells'][2] + 1)) + k + 1]:E} "
                + f"{zcoord[((i + 1) * (dic['noCells'][2] + 1)) + k + 1]:E} "
            )
        tmp.extend(tmp[-dic["noCells"][0] :])
        tmp.extend(tmp[-2 * dic["noCells"][0] :])
    for i in range(dic["noCells"][0]):
        tmp.append(
            f"{zcoord[((i + 1) * (dic['noCells'][2] + 1)) - 1]:E} "
            + f"{zcoord[((i + 2) * (dic['noCells'][2] + 1)) - 1]:E} "
        )
    tmp.extend(tmp[-dic["noCells"][0] :])
    grid += compact_format("".join(tmp).split())
    grid.append("/")
    with open(
        f"{dic['deck']}/GRID.INC",
        "w",
        encoding="utf8",
    ) as file:
        file.write("".join(grid))


def write_keywords(dic):
    """
    Write some of the used keywords and values for OPM Flow

    Args:
        dic (dict): Global dictionary

    Returns:
        dic (dict): Modified global dictionary

    """
    git = "-- This deck was generated by pofff https://github.com/OPM/pofff\n"
    dic["dx"] = False
    keywords = ["fluxnum", "fipnum"]
    if dic["grid"] == "tensor":
        keywords += ["dx", "dz"]
        dic["dx"] = list(map(str, list((dic["xmx"][1:] - dic["xmx"][:-1]))))
        d_z = list(map(str, list((dic["zmz"][1:] - dic["zmz"][:-1]))))
        dic["dz"] = [d_z[0]] * dic["noCells"][0]
        for i in range(dic["noCells"][2] - 1):
            dic["dx"].extend(dic["dx"][-dic["noCells"][0] :])
            dic["dz"] += [d_z[i + 1]] * dic["noCells"][0]
    if "multpv" in dic:
        mults = ["multpv", "multx", "multx-", "multz", "multz-"]
        keywords += mults
        for name in mults:
            dic[name] = dic["multpv"].copy()
    for names in keywords:
        dic[f"{names}"] = compact_format(dic[f"{names}"])
        dic[f"{names}"].insert(0, f"{names.upper()}\n")
        dic[f"{names}"].insert(0, git)
        dic[f"{names}"].insert(0, "-- Copyright (C) 2025 NORCE Research AS\n")
        dic[f"{names}"].append("/")
        with open(
            f"{dic['deck']}/{names.upper()}.INC",
            "w",
            encoding="utf8",
        ) as file:
            file.write("".join(dic[f"{names}"]))


def opm_files(dic):
    """
    Write opm-related files by running mako templates

    Args:
        dic (dict): Global dictionary

    Returns:
        None

    """
    write_keywords(dic)
    var = {"dic": dic}
    mytemplate = Template(filename=f"{dic['path']}/templates/deck.mako")
    filledtemplate = mytemplate.render(**var)
    with open(
        f"{dic['deck']}/{dic['data']}.DATA",
        "w",
        encoding="utf8",
    ) as file:
        file.write(filledtemplate)
    names = ["bcprop", "equalreg", "satufunc"]
    if dic["mode"] in ["ert", "everest"]:
        dic["hm"] = []
        for i in range(1, 8):
            for name in [
                "PORO",
                "PERM",
                "PERMX",
                "PERMY",
                "PERMZ",
                "DISPERC",
                "SWI",
                "SNI",
                "PEN",
                "NKRW",
                "NKRN",
                "NPE",
                "THRE",
                "NPNT",
            ]:
                if f"{name}{i}" in dic.keys():
                    dic["hm"].append(f"{name}{i}")
        if "THICKNESSMULT" in dic.keys():
            dic["hm"].append("THICKNESSMULT")
        names += ["flow", "copyd"]
        if dic["mode"] == "everest":
            names += ["scale"]
        if dic["monotonic"]:
            names += ["monotonic"]
        mytemplate = Template(filename=f"{dic['path']}/templates/{dic['mode']}.mako")
        filledtemplate = mytemplate.render(**var)
        with open(
            f"{dic['fol']}/{dic['mode']}.{'txt' if dic['mode']=='ert' else 'yml'}",
            "w",
            encoding="utf8",
        ) as file:
            file.write(filledtemplate)
    for name in names:
        mytemplate = Template(filename=f"{dic['path']}/templates/{name}.mako")
        filledtemplate = mytemplate.render(**var)
        with open(
            f"{dic['jobs']}/{name}.py",
            "w",
            encoding="utf8",
        ) as file:
            file.write(filledtemplate)
        os.system(f"chmod u+x {dic['jobs']}/{name}.py")
        if dic["mode"] == "single":
            prosc = subprocess.run(
                ["python3", f"{dic['fol']}/{name}.py"],
                check=True,
            )
            if prosc.returncode != 0:
                raise ValueError(f"Invalid result: { prosc.returncode }")
            os.system(f"rm -rf {dic['fol']}/{name}.py")
    if dic["mode"] == "ert":
        for name in ["prior", "para", "obs"]:
            mytemplate = Template(filename=f"{dic['path']}/templates/{name}.mako")
            filledtemplate = mytemplate.render(**var)
            with open(
                f"{dic['deck']}/{name}.{'tmpl' if name=='prior' else 'txt'}",
                "w",
                encoding="utf8",
            ) as file:
                file.write(filledtemplate)


def compact_format(values):
    """
    Use the 'n*x' notation to write repited values to save storage

    Args:
        values (list): List with the variable values

    Returns:
        values (list): List with the compacted variable values

    """
    n, value0, tmp = 0, float(values[0]), []
    for value in values:
        if value0 != float(value) or len(values) == 1:
            if value0 == 0:
                tmp.append(f"{n}*0 " if n > 1 else "0 ")
            elif value0.is_integer():
                tmp.append(f"{n}*{int(value0)} " if n > 1 else f"{int(value0)} ")
            else:
                tmp.append(f"{n}*{value0} " if n > 1 else f"{value0} ")
            n = 1
            value0 = float(value)
        else:
            n += 1
    if value0 == float(values[-1]) and len(values) > 1:
        if value0 == 0:
            tmp.append(f"{n}*0 " if n > 1 else "0 ")
        elif value0.is_integer():
            tmp.append(f"{n}*{int(value0)} " if n > 1 else f"{int(value0)} ")
        else:
            tmp.append(f"{n}*{value0} " if n > 1 else f"{value0} ")
    return tmp
